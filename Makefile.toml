[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
TF2_DIR = "${HOME}/.local/share/Steam/steamapps/common/Team Fortress 2"
TF2_BIN_PATH = "${TF2_DIR}/bin/linux64"
TMP_DIR = "/tmp/oxidus"

COMMON_HELPERS = '''
get_pid() {
    pid=$(pidof tf_linux64) || { echo "TF2 not running" >&2; exit 1; }
    echo "$pid"
}

build_lib() {
    local features="$1"
    local cargo_args=()
    [[ -n "$features" ]] && cargo_args+=(--features "$features")
    
    lib_path=$(cargo build "${cargo_args[@]}" --message-format=json | \
        jq -r 'select(.profile.test == false) | select(.target.name == "oxidus") | .filenames[0]')
    
    [[ -f "$lib_path" ]] || { echo "liboxidus.so not found" >&2; exit 1; }
    echo "$lib_path"
}

copy_to_temp() {
    mkdir -p "${TMP_DIR}"
    local tmp_lib_path="${TMP_DIR}/liboxidus_$(date +%Y%m%d%H%M%S).so"
    cp "$1" "$tmp_lib_path"
    echo "$tmp_lib_path"
}

run_inject_gdb() {
    local pid="$1"
    local lib_path="$2"
    local mode="$3"
    local continue_exec="${4:false}"
    
    local gdb_cmds=(
        -ex "attach $pid"
        -ex "set \$dlopen = (void* (*)(char*, int))dlopen"
        -ex "set \$dlerror = (char* (*)(void))dlerror"
        -ex "call \$dlopen(\"$lib_path\", $mode)"
        -ex "call \$dlerror()"
    )
    
    #if ${continue_exec}; then
    #    sudo  rust-gdb -q "${gdb_cmds[@]}" -ex "continue"
    #else
        sudo rust-gdb -n -q -batch "${gdb_cmds[@]}" -ex "detach" -ex "quit"
    #fi
}
'''

[tasks.inject]
workspace = false
script = '''
eval "${COMMON_HELPERS}"
pid=$(get_pid)
lib_path=$(build_lib "")
tmp_lib_path=$(copy_to_temp "$lib_path")
run_inject_gdb "$pid" "$tmp_lib_path" 10 false || exit 1
'''

[tasks.dump-netvars]
workspace = false
script = '''
eval "${COMMON_HELPERS}"
pid=$(get_pid)
lib_path=$(build_lib "dump-netvars")
tmp_lib_path=$(copy_to_temp "$lib_path")
run_inject_gdb "$pid" "$tmp_lib_path" 2 false || exit 1
'''

[tasks.inject-gdb]
workspace = false
script = '''
eval "${COMMON_HELPERS}"
pid=$(get_pid)
lib_path=$(build_lib "")
tmp_lib_path=$(copy_to_temp "$lib_path")
run_inject_gdb "$pid" "$tmp_lib_path" 2 true || exit 1
'''

[tasks.unload]
workspace = false
script = '''
eval "${COMMON_HELPERS}"
pid=$(get_pid)
libpath=$(ls -t ${TMP_DIR}/liboxidus_*.so 2>/dev/null | head -n1)
[[ -z "$libpath" ]] && { echo "No libraries found" >&2; exit 1; }

sudo rust-gdb -n -q -batch \
    -ex "set solib-search-path ${TF2_BIN_PATH}:/usr/lib:/lib:/lib64" \
    -ex "attach $pid" \
    -ex "set \$dlopen = (void* (*)(char*, int))dlopen" \
    -ex "set \$dlclose = (int (*)(void*))dlclose" \
    -ex "set \$dlerror = (char* (*)(void))dlerror" \
    -ex "set \$self = \$dlopen(\"$libpath\", 262)" \
    -ex "call \$dlerror()" \
    -ex "call oxidus_cleanup()" \
    -ex "call \$dlclose(\$self)" \
    -ex "call \$dlerror()" \
    -ex "detach" \
    -ex "quit" || { echo "Failed to unload" >&2; exit 1; }
'''

[tasks.start-tf2]
workspace = false
script = '''
pkill -9 tf_linux64 || true
cd "${TF2_DIR}"
export LD_LIBRARY_PATH="${TF2_BIN_PATH}:/usr/lib/"
"${TF2_DIR}/tf_linux64" -steam -gl -nobreakpad -nohltv -noquicktime
'''

[tasks.attach-gdb]
workspace = false
script = '''
eval "${COMMON_HELPERS}"
pid=$(get_pid)
sudo -t rust-gdb -q \
    -ex "set solib-search-path ${TF2_BIN_PATH}" \
    -ex "attach $pid" \
    -ex "set \$dlopen = (void* (*)(char*, int))dlopen" \
    -ex "tui enable" \
    -ex "continue"
'''

[tasks.maps]
workspace = false
script = '''
eval "${COMMON_HELPERS}"
pid=$(get_pid)
nvim "/proc/$pid/maps"
'''

[tasks.expand]
workspace = false
script = '''
cd oxidus && cargo expand --lib > ../expand.rs
nvim ../expand.rs
'''

[tasks.reload]
dependencies = ["build", "unload", "inject"]

[tasks.build]
command = "cargo"
args = ["build"]

[tasks.default]
dependencies = ["build"]
